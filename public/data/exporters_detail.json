{
  "exporter_id" : 1,
  "name": "eBPF Exporter",
  "logo_url": "https://avatars3.githubusercontent.com/u/314135?v=4",
  "category": "Miscellaneous",
  "official": "Unofficial",
  "stars": 742,
  "repository_url": "https://github.com/cloudflare/ebpf_exporter",
  "description": " Prometheus exporter for custom eBPF metrics",
  "readme": "# ebpf_exporter\n\n![Build Status](https://github.com/cloudflare/ebpf_exporter/workflows/Go/badge.svg)\n![Build Status](https://github.com/cloudflare/ebpf_exporter/workflows/golangci-lint/badge.svg)\n\nPrometheus exporter for custom eBPF metrics.\n\nMotivation of this exporter is to allow you to write eBPF code and export\nmetrics that are not otherwise accessible from the Linux kernel.\n\neBPF was [described by](https://lkml.org/lkml/2015/4/14/232) Ingo Moln\u00e1r as:\n\n> One of the more interesting features in this cycle is the ability to attach\n> eBPF programs (user-defined, sandboxed bytecode executed by the kernel)\n> to kprobes. This allows user-defined instrumentation on a live kernel image\n> that can never crash, hang or interfere with the kernel negatively.\n\nAn easy way of thinking about this exporter is bcc tools as prometheus metrics:\n\n* https://iovisor.github.io/bcc\n\n## Reading material\n\n* https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md\n* http://www.brendangregg.com/ebpf.html\n\n## Building and running\n\nTo build, you need to have `libbcc` installed:\n\n* https://github.com/iovisor/bcc/blob/master/INSTALL.md\n\nYou can use pre-compiled binary from Releases:\n\n* https://github.com/cloudflare/ebpf_exporter/releases\n\nThat still requires you to have `libbcc`. To build release binaries yourself:\n\n```\n$ make release-binaries\n```\n\nTo build a package from latest sources:\n\n```\n$ go get -u -v github.com/cloudflare/ebpf_exporter/...\n```\n\nTo run with [`bio`](examples/bio.yaml) config (you need `root` privileges):\n\n```\n$ ~/go/bin/ebpf_exporter --config.file=src/github.com/cloudflare/ebpf_exporter/examples/bio.yaml\n```\n\nIf you pass `--debug`, you can see raw tables at `/tables` endpoint.\n\n## Benchmarking overhead\n\nSee [benchmark](benchmark) directory to get an idea of how low ebpf overhead is.\n\n## Supported scenarios\n\nCurrently the only supported way of getting data out of the kernel\nis via maps (we call them tables in configuration). See:\n\n* https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md#maps\n\nSee [examples](#examples) section for real world examples.\n\nIf you have examples you want to share, please feel free to open a PR.\n\n## Configuration\n\nSkip to [format](#configuration-file-format) to see the full specification.\n\n### Examples\n\nYou can find additional examples in [examples](examples) directory.\n\nUnless otherwise specified, all examples are expected to work on Linux 4.14,\nwhich is the latest LTS release at the time of writing.\n\nIn general, exported to work from Linux 4.1. See BCC docs for more details:\n\n* https://github.com/iovisor/bcc/blob/master/INSTALL.md#kernel-configuration\n\n#### Page cache operations for `syslog-ng` and `systemd-journald` (counters)\n\nThis program attaches to kernel functions responsible for managing\npage cache and counts pages going through them.\n\nThis is an adapted version of `cachestat` from bcc tools:\n\n* https://github.com/iovisor/bcc/blob/master/tools/cachestat_example.txt\n\nResulting metrics:\n\n```\n# HELP ebpf_exporter_page_cache_ops_total Page cache operation counters by type\n# TYPE ebpf_exporter_page_cache_ops_total counter\nebpf_exporter_page_cache_ops_total{command=\"syslog-ng\",op=\"account_page_dirtied\"} 1531\nebpf_exporter_page_cache_ops_total{command=\"syslog-ng\",op=\"add_to_page_cache_lru\"} 1092\nebpf_exporter_page_cache_ops_total{command=\"syslog-ng\",op=\"mark_buffer_dirty\"} 31205\nebpf_exporter_page_cache_ops_total{command=\"syslog-ng\",op=\"mark_page_accessed\"} 54846\nebpf_exporter_page_cache_ops_total{command=\"systemd-journal\",op=\"account_page_dirtied\"} 104681\nebpf_exporter_page_cache_ops_total{command=\"systemd-journal\",op=\"add_to_page_cache_lru\"} 7330\nebpf_exporter_page_cache_ops_total{command=\"systemd-journal\",op=\"mark_buffer_dirty\"} 125486\nebpf_exporter_page_cache_ops_total{command=\"systemd-journal\",op=\"mark_page_accessed\"} 898214\n```\n\nYou can check out `cachestat` source code to see how these translate:\n\n* https://github.com/iovisor/bcc/blob/master/tools/cachestat.py\n\n```yaml\nprograms:\n  - name: cachestat\n    metrics:\n      counters:\n        - name: page_cache_ops_total\n          help: Page cache operation counters by type\n          table: counts\n          labels:\n            - name: op\n              size: 8\n              decoders:\n                - name: ksym\n            - name: command\n              size: 128\n              decoders:\n                - name: string\n                - name: regexp\n                  regexps:\n                    - ^systemd-journal$\n                    - ^syslog-ng$\n    kprobes:\n      add_to_page_cache_lru: do_count\n      mark_page_accessed: do_count\n      account_page_dirtied: do_count\n      mark_buffer_dirty: do_count\n    code: |\n      #include <uapi/linux/ptrace.h>\n\n      struct key_t {\n          u64 ip;\n          char command[128];\n      };\n\n      BPF_HASH(counts, struct key_t);\n\n      int do_count(struct pt_regs *ctx) {\n          struct key_t key = { .ip = PT_REGS_IP(ctx) - 1 };\n          bpf_get_current_comm(&key.command, sizeof(key.command));\n\n          counts.increment(key);\n\n          return 0;\n      }\n```\n\n#### Block IO histograms (histograms)\n\nThis program attaches to block io subsystem and reports metrics on disk\nlatency and request sizes for separate disks.\n\nThe following tools are working with similar concepts:\n\n* https://github.com/iovisor/bcc/blob/master/tools/biosnoop_example.txt\n* https://github.com/iovisor/bcc/blob/master/tools/biolatency_example.txt\n* https://github.com/iovisor/bcc/blob/master/tools/bitesize_example.txt\n\nThis program was the initial reason for the exporter and was heavily\ninfluenced by the experimental exporter from Daniel Swarbrick:\n\n* https://github.com/dswarbrick/ebpf_exporter\n\nResulting metrics:\n\n```\n# HELP ebpf_exporter_bio_latency_seconds Block IO latency histogram\n# TYPE ebpf_exporter_bio_latency_seconds histogram\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"1e-06\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"2e-06\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"4e-06\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"8e-06\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"1.6e-05\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"3.2e-05\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"6.4e-05\"} 2\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"0.000128\"} 388\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"0.000256\"} 20086\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"0.000512\"} 21601\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"0.001024\"} 22487\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"0.002048\"} 25592\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"0.004096\"} 26891\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"0.008192\"} 27835\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"0.016384\"} 28540\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"0.032768\"} 28725\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"0.065536\"} 28776\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"0.131072\"} 28786\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"0.262144\"} 28790\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"0.524288\"} 28792\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"1.048576\"} 28792\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"2.097152\"} 28792\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"4.194304\"} 28792\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"8.388608\"} 28792\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"16.777216\"} 28792\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"33.554432\"} 28792\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"67.108864\"} 28792\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"read\",le=\"+Inf\"} 28792\nebpf_exporter_bio_latency_seconds_sum{device=\"sda\",operation=\"read\"} 0\nebpf_exporter_bio_latency_seconds_count{device=\"sda\",operation=\"read\"} 28792\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"1e-06\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"2e-06\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"4e-06\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"8e-06\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"1.6e-05\"} 0\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"3.2e-05\"} 508\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"6.4e-05\"} 2828\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"0.000128\"} 5701\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"0.000256\"} 8520\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"0.000512\"} 11975\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"0.001024\"} 12448\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"0.002048\"} 16798\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"0.004096\"} 26909\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"0.008192\"} 41248\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"0.016384\"} 59030\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"0.032768\"} 86501\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"0.065536\"} 118934\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"0.131072\"} 122148\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"0.262144\"} 122373\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"0.524288\"} 122462\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"1.048576\"} 122470\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"2.097152\"} 122470\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"4.194304\"} 122470\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"8.388608\"} 122470\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"16.777216\"} 122470\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"33.554432\"} 122470\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"67.108864\"} 122470\nebpf_exporter_bio_latency_seconds_bucket{device=\"sda\",operation=\"write\",le=\"+Inf\"} 122470\nebpf_exporter_bio_latency_seconds_sum{device=\"sda\",operation=\"write\"} 0\nebpf_exporter_bio_latency_seconds_count{device=\"sda\",operation=\"write\"} 122470\n...\n```\n\n```\n# HELP ebpf_exporter_bio_size_bytes Block IO size histogram with kibibyte buckets\n# TYPE ebpf_exporter_bio_size_bytes histogram\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"read\",le=\"1024\"} 14\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"read\",le=\"2048\"} 14\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"read\",le=\"4096\"} 28778\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"read\",le=\"8192\"} 28778\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"read\",le=\"16384\"} 28778\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"read\",le=\"32768\"} 28778\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"read\",le=\"65536\"} 28779\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"read\",le=\"131072\"} 28781\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"read\",le=\"262144\"} 28785\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"read\",le=\"524288\"} 28792\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"read\",le=\"1.048576e+06\"} 28792\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"read\",le=\"2.097152e+06\"} 28792\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"read\",le=\"4.194304e+06\"} 28792\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"read\",le=\"8.388608e+06\"} 28792\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"read\",le=\"1.6777216e+07\"} 28792\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"read\",le=\"3.3554432e+07\"} 28792\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"read\",le=\"+Inf\"} 28792\nebpf_exporter_bio_size_bytes_sum{device=\"sda\",operation=\"read\"} 0\nebpf_exporter_bio_size_bytes_count{device=\"sda\",operation=\"read\"} 28792\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"write\",le=\"1024\"} 1507\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"write\",le=\"2048\"} 4007\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"write\",le=\"4096\"} 15902\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"write\",le=\"8192\"} 17726\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"write\",le=\"16384\"} 18429\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"write\",le=\"32768\"} 19639\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"write\",le=\"65536\"} 19676\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"write\",le=\"131072\"} 20367\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"write\",le=\"262144\"} 21952\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"write\",le=\"524288\"} 49636\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"write\",le=\"1.048576e+06\"} 122470\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"write\",le=\"2.097152e+06\"} 122470\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"write\",le=\"4.194304e+06\"} 122470\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"write\",le=\"8.388608e+06\"} 122470\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"write\",le=\"1.6777216e+07\"} 122470\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"write\",le=\"3.3554432e+07\"} 122470\nebpf_exporter_bio_size_bytes_bucket{device=\"sda\",operation=\"write\",le=\"+Inf\"} 122470\nebpf_exporter_bio_size_bytes_sum{device=\"sda\",operation=\"write\"} 0\nebpf_exporter_bio_size_bytes_count{device=\"sda\",operation=\"write\"} 122470\n...\n```\n\nTo nicely plot these in Grafana, you'll need v5.1:\n\n* https://github.com/grafana/grafana/pull/11087\n\n![Histogram](https://raw.githubusercontent.com/cloudflare/ebpf_exporter/master/examples/bio.write.latency.png)\n\n",
  "recent_release": "2020-11-20T21:42:46Z",
  "release": [
    {
      "release_version": "v1.0.0",
      "release_date": "2018-08-20T23:52:34Z",
      "release_url": "https://github.com/cloudflare/ebpf_exporter/releases/tag/v1.0.0"
    },
    {
      "release_version": "v1.1.0", 
      "release_date": "2019-01-08T23:18:28Z", 
      "release_url": "https://github.com/cloudflare/ebpf_exporter/releases/tag/v1.1.0"
    },
    {
      "release_version": "v1.2.0", 
      "release_date": "2019-10-17T18:04:43Z", 
      "release_url": "https://github.com/cloudflare/ebpf_exporter/releases/tag/v1.2.0"
    }, 
    {
      "release_version": "v1.2.1", 
      "release_date": "2019-11-26T07:56:00Z", 
      "release_url": "https://github.com/cloudflare/ebpf_exporter/releases/tag/v1.2.1"
    }, 
    {
      "release_version": "v1.2.2", 
      "release_date": "2019-12-17T00:04:28Z", 
      "release_url": "https://github.com/cloudflare/ebpf_exporter/releases/tag/v1.2.2"
    }, 
    {
      "release_version": "v1.2.3", 
      "release_date": "2020-11-20T21:42:46Z", 
      "release_url": "https://github.com/cloudflare/ebpf_exporter/releases/tag/v1.2.3"
    }
  ]
}
  